// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/localization/proto/odometry_lane_marker.proto

#ifndef PROTOBUF_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto__INCLUDED
#define PROTOBUF_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/geometry.pb.h"
// @@protoc_insertion_point(includes)

namespace apollo {
namespace localization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
void protobuf_AssignDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();

class ContourOdometryLaneMarkers;
class OdometryLaneMarker;
class OdometryLaneMarkerPoint;
class OdometryLaneMarkersPack;

// ===================================================================

class OdometryLaneMarkerPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.OdometryLaneMarkerPoint) */ {
 public:
  OdometryLaneMarkerPoint();
  virtual ~OdometryLaneMarkerPoint();

  OdometryLaneMarkerPoint(const OdometryLaneMarkerPoint& from);

  inline OdometryLaneMarkerPoint& operator=(const OdometryLaneMarkerPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryLaneMarkerPoint& default_instance();

  void Swap(OdometryLaneMarkerPoint* other);

  // implements Message ----------------------------------------------

  inline OdometryLaneMarkerPoint* New() const { return New(NULL); }

  OdometryLaneMarkerPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OdometryLaneMarkerPoint& from);
  void MergeFrom(const OdometryLaneMarkerPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OdometryLaneMarkerPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .apollo.common.PointENU position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::apollo::common::PointENU& position() const;
  ::apollo::common::PointENU* mutable_position();
  ::apollo::common::PointENU* release_position();
  void set_allocated_position(::apollo::common::PointENU* position);

  // optional .apollo.common.Point3D direct = 2;
  bool has_direct() const;
  void clear_direct();
  static const int kDirectFieldNumber = 2;
  const ::apollo::common::Point3D& direct() const;
  ::apollo::common::Point3D* mutable_direct();
  ::apollo::common::Point3D* release_direct();
  void set_allocated_direct(::apollo::common::Point3D* direct);

  // optional double curvature = 3;
  bool has_curvature() const;
  void clear_curvature();
  static const int kCurvatureFieldNumber = 3;
  double curvature() const;
  void set_curvature(double value);

  // @@protoc_insertion_point(class_scope:apollo.localization.OdometryLaneMarkerPoint)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_direct();
  inline void clear_has_direct();
  inline void set_has_curvature();
  inline void clear_has_curvature();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::apollo::common::PointENU* position_;
  ::apollo::common::Point3D* direct_;
  double curvature_;
  friend void  protobuf_AddDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_AssignDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();

  void InitAsDefaultInstance();
  static OdometryLaneMarkerPoint* default_instance_;
};
// -------------------------------------------------------------------

class OdometryLaneMarker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.OdometryLaneMarker) */ {
 public:
  OdometryLaneMarker();
  virtual ~OdometryLaneMarker();

  OdometryLaneMarker(const OdometryLaneMarker& from);

  inline OdometryLaneMarker& operator=(const OdometryLaneMarker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryLaneMarker& default_instance();

  void Swap(OdometryLaneMarker* other);

  // implements Message ----------------------------------------------

  inline OdometryLaneMarker* New() const { return New(NULL); }

  OdometryLaneMarker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OdometryLaneMarker& from);
  void MergeFrom(const OdometryLaneMarker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OdometryLaneMarker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional double quality = 2;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 2;
  double quality() const;
  void set_quality(double value);

  // repeated .apollo.localization.OdometryLaneMarkerPoint points = 3;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 3;
  const ::apollo::localization::OdometryLaneMarkerPoint& points(int index) const;
  ::apollo::localization::OdometryLaneMarkerPoint* mutable_points(int index);
  ::apollo::localization::OdometryLaneMarkerPoint* add_points();
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarkerPoint >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarkerPoint >&
      points() const;

  // @@protoc_insertion_point(class_scope:apollo.localization.OdometryLaneMarker)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quality();
  inline void clear_has_quality();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  double quality_;
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarkerPoint > points_;
  friend void  protobuf_AddDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_AssignDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();

  void InitAsDefaultInstance();
  static OdometryLaneMarker* default_instance_;
};
// -------------------------------------------------------------------

class ContourOdometryLaneMarkers : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.ContourOdometryLaneMarkers) */ {
 public:
  ContourOdometryLaneMarkers();
  virtual ~ContourOdometryLaneMarkers();

  ContourOdometryLaneMarkers(const ContourOdometryLaneMarkers& from);

  inline ContourOdometryLaneMarkers& operator=(const ContourOdometryLaneMarkers& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContourOdometryLaneMarkers& default_instance();

  void Swap(ContourOdometryLaneMarkers* other);

  // implements Message ----------------------------------------------

  inline ContourOdometryLaneMarkers* New() const { return New(NULL); }

  ContourOdometryLaneMarkers* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContourOdometryLaneMarkers& from);
  void MergeFrom(const ContourOdometryLaneMarkers& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContourOdometryLaneMarkers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.localization.OdometryLaneMarker lane_marker = 1;
  int lane_marker_size() const;
  void clear_lane_marker();
  static const int kLaneMarkerFieldNumber = 1;
  const ::apollo::localization::OdometryLaneMarker& lane_marker(int index) const;
  ::apollo::localization::OdometryLaneMarker* mutable_lane_marker(int index);
  ::apollo::localization::OdometryLaneMarker* add_lane_marker();
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarker >*
      mutable_lane_marker();
  const ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarker >&
      lane_marker() const;

  // @@protoc_insertion_point(class_scope:apollo.localization.ContourOdometryLaneMarkers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarker > lane_marker_;
  friend void  protobuf_AddDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_AssignDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();

  void InitAsDefaultInstance();
  static ContourOdometryLaneMarkers* default_instance_;
};
// -------------------------------------------------------------------

class OdometryLaneMarkersPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:apollo.localization.OdometryLaneMarkersPack) */ {
 public:
  OdometryLaneMarkersPack();
  virtual ~OdometryLaneMarkersPack();

  OdometryLaneMarkersPack(const OdometryLaneMarkersPack& from);

  inline OdometryLaneMarkersPack& operator=(const OdometryLaneMarkersPack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OdometryLaneMarkersPack& default_instance();

  void Swap(OdometryLaneMarkersPack* other);

  // implements Message ----------------------------------------------

  inline OdometryLaneMarkersPack* New() const { return New(NULL); }

  OdometryLaneMarkersPack* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OdometryLaneMarkersPack& from);
  void MergeFrom(const OdometryLaneMarkersPack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OdometryLaneMarkersPack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .apollo.localization.ContourOdometryLaneMarkers lane_markers = 1;
  int lane_markers_size() const;
  void clear_lane_markers();
  static const int kLaneMarkersFieldNumber = 1;
  const ::apollo::localization::ContourOdometryLaneMarkers& lane_markers(int index) const;
  ::apollo::localization::ContourOdometryLaneMarkers* mutable_lane_markers(int index);
  ::apollo::localization::ContourOdometryLaneMarkers* add_lane_markers();
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::ContourOdometryLaneMarkers >*
      mutable_lane_markers();
  const ::google::protobuf::RepeatedPtrField< ::apollo::localization::ContourOdometryLaneMarkers >&
      lane_markers() const;

  // @@protoc_insertion_point(class_scope:apollo.localization.OdometryLaneMarkersPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::apollo::localization::ContourOdometryLaneMarkers > lane_markers_;
  friend void  protobuf_AddDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_AssignDesc_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();
  friend void protobuf_ShutdownFile_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto();

  void InitAsDefaultInstance();
  static OdometryLaneMarkersPack* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// OdometryLaneMarkerPoint

// optional .apollo.common.PointENU position = 1;
inline bool OdometryLaneMarkerPoint::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OdometryLaneMarkerPoint::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OdometryLaneMarkerPoint::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OdometryLaneMarkerPoint::clear_position() {
  if (position_ != NULL) position_->::apollo::common::PointENU::Clear();
  clear_has_position();
}
inline const ::apollo::common::PointENU& OdometryLaneMarkerPoint::position() const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarkerPoint.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::apollo::common::PointENU* OdometryLaneMarkerPoint::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::apollo::common::PointENU;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.OdometryLaneMarkerPoint.position)
  return position_;
}
inline ::apollo::common::PointENU* OdometryLaneMarkerPoint::release_position() {
  // @@protoc_insertion_point(field_release:apollo.localization.OdometryLaneMarkerPoint.position)
  clear_has_position();
  ::apollo::common::PointENU* temp = position_;
  position_ = NULL;
  return temp;
}
inline void OdometryLaneMarkerPoint::set_allocated_position(::apollo::common::PointENU* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.OdometryLaneMarkerPoint.position)
}

// optional .apollo.common.Point3D direct = 2;
inline bool OdometryLaneMarkerPoint::has_direct() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OdometryLaneMarkerPoint::set_has_direct() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OdometryLaneMarkerPoint::clear_has_direct() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OdometryLaneMarkerPoint::clear_direct() {
  if (direct_ != NULL) direct_->::apollo::common::Point3D::Clear();
  clear_has_direct();
}
inline const ::apollo::common::Point3D& OdometryLaneMarkerPoint::direct() const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarkerPoint.direct)
  return direct_ != NULL ? *direct_ : *default_instance_->direct_;
}
inline ::apollo::common::Point3D* OdometryLaneMarkerPoint::mutable_direct() {
  set_has_direct();
  if (direct_ == NULL) {
    direct_ = new ::apollo::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:apollo.localization.OdometryLaneMarkerPoint.direct)
  return direct_;
}
inline ::apollo::common::Point3D* OdometryLaneMarkerPoint::release_direct() {
  // @@protoc_insertion_point(field_release:apollo.localization.OdometryLaneMarkerPoint.direct)
  clear_has_direct();
  ::apollo::common::Point3D* temp = direct_;
  direct_ = NULL;
  return temp;
}
inline void OdometryLaneMarkerPoint::set_allocated_direct(::apollo::common::Point3D* direct) {
  delete direct_;
  direct_ = direct;
  if (direct) {
    set_has_direct();
  } else {
    clear_has_direct();
  }
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.OdometryLaneMarkerPoint.direct)
}

// optional double curvature = 3;
inline bool OdometryLaneMarkerPoint::has_curvature() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OdometryLaneMarkerPoint::set_has_curvature() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OdometryLaneMarkerPoint::clear_has_curvature() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OdometryLaneMarkerPoint::clear_curvature() {
  curvature_ = 0;
  clear_has_curvature();
}
inline double OdometryLaneMarkerPoint::curvature() const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarkerPoint.curvature)
  return curvature_;
}
inline void OdometryLaneMarkerPoint::set_curvature(double value) {
  set_has_curvature();
  curvature_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.OdometryLaneMarkerPoint.curvature)
}

// -------------------------------------------------------------------

// OdometryLaneMarker

// optional string type = 1;
inline bool OdometryLaneMarker::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OdometryLaneMarker::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OdometryLaneMarker::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OdometryLaneMarker::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& OdometryLaneMarker::type() const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarker.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OdometryLaneMarker::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:apollo.localization.OdometryLaneMarker.type)
}
inline void OdometryLaneMarker::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:apollo.localization.OdometryLaneMarker.type)
}
inline void OdometryLaneMarker::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:apollo.localization.OdometryLaneMarker.type)
}
inline ::std::string* OdometryLaneMarker::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:apollo.localization.OdometryLaneMarker.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OdometryLaneMarker::release_type() {
  // @@protoc_insertion_point(field_release:apollo.localization.OdometryLaneMarker.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OdometryLaneMarker::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:apollo.localization.OdometryLaneMarker.type)
}

// optional double quality = 2;
inline bool OdometryLaneMarker::has_quality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OdometryLaneMarker::set_has_quality() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OdometryLaneMarker::clear_has_quality() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OdometryLaneMarker::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline double OdometryLaneMarker::quality() const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarker.quality)
  return quality_;
}
inline void OdometryLaneMarker::set_quality(double value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:apollo.localization.OdometryLaneMarker.quality)
}

// repeated .apollo.localization.OdometryLaneMarkerPoint points = 3;
inline int OdometryLaneMarker::points_size() const {
  return points_.size();
}
inline void OdometryLaneMarker::clear_points() {
  points_.Clear();
}
inline const ::apollo::localization::OdometryLaneMarkerPoint& OdometryLaneMarker::points(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarker.points)
  return points_.Get(index);
}
inline ::apollo::localization::OdometryLaneMarkerPoint* OdometryLaneMarker::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.OdometryLaneMarker.points)
  return points_.Mutable(index);
}
inline ::apollo::localization::OdometryLaneMarkerPoint* OdometryLaneMarker::add_points() {
  // @@protoc_insertion_point(field_add:apollo.localization.OdometryLaneMarker.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarkerPoint >*
OdometryLaneMarker::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.OdometryLaneMarker.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarkerPoint >&
OdometryLaneMarker::points() const {
  // @@protoc_insertion_point(field_list:apollo.localization.OdometryLaneMarker.points)
  return points_;
}

// -------------------------------------------------------------------

// ContourOdometryLaneMarkers

// repeated .apollo.localization.OdometryLaneMarker lane_marker = 1;
inline int ContourOdometryLaneMarkers::lane_marker_size() const {
  return lane_marker_.size();
}
inline void ContourOdometryLaneMarkers::clear_lane_marker() {
  lane_marker_.Clear();
}
inline const ::apollo::localization::OdometryLaneMarker& ContourOdometryLaneMarkers::lane_marker(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.ContourOdometryLaneMarkers.lane_marker)
  return lane_marker_.Get(index);
}
inline ::apollo::localization::OdometryLaneMarker* ContourOdometryLaneMarkers::mutable_lane_marker(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.ContourOdometryLaneMarkers.lane_marker)
  return lane_marker_.Mutable(index);
}
inline ::apollo::localization::OdometryLaneMarker* ContourOdometryLaneMarkers::add_lane_marker() {
  // @@protoc_insertion_point(field_add:apollo.localization.ContourOdometryLaneMarkers.lane_marker)
  return lane_marker_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarker >*
ContourOdometryLaneMarkers::mutable_lane_marker() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.ContourOdometryLaneMarkers.lane_marker)
  return &lane_marker_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::localization::OdometryLaneMarker >&
ContourOdometryLaneMarkers::lane_marker() const {
  // @@protoc_insertion_point(field_list:apollo.localization.ContourOdometryLaneMarkers.lane_marker)
  return lane_marker_;
}

// -------------------------------------------------------------------

// OdometryLaneMarkersPack

// repeated .apollo.localization.ContourOdometryLaneMarkers lane_markers = 1;
inline int OdometryLaneMarkersPack::lane_markers_size() const {
  return lane_markers_.size();
}
inline void OdometryLaneMarkersPack::clear_lane_markers() {
  lane_markers_.Clear();
}
inline const ::apollo::localization::ContourOdometryLaneMarkers& OdometryLaneMarkersPack::lane_markers(int index) const {
  // @@protoc_insertion_point(field_get:apollo.localization.OdometryLaneMarkersPack.lane_markers)
  return lane_markers_.Get(index);
}
inline ::apollo::localization::ContourOdometryLaneMarkers* OdometryLaneMarkersPack::mutable_lane_markers(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.localization.OdometryLaneMarkersPack.lane_markers)
  return lane_markers_.Mutable(index);
}
inline ::apollo::localization::ContourOdometryLaneMarkers* OdometryLaneMarkersPack::add_lane_markers() {
  // @@protoc_insertion_point(field_add:apollo.localization.OdometryLaneMarkersPack.lane_markers)
  return lane_markers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::apollo::localization::ContourOdometryLaneMarkers >*
OdometryLaneMarkersPack::mutable_lane_markers() {
  // @@protoc_insertion_point(field_mutable_list:apollo.localization.OdometryLaneMarkersPack.lane_markers)
  return &lane_markers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::apollo::localization::ContourOdometryLaneMarkers >&
OdometryLaneMarkersPack::lane_markers() const {
  // @@protoc_insertion_point(field_list:apollo.localization.OdometryLaneMarkersPack.lane_markers)
  return lane_markers_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2flocalization_2fproto_2fodometry_5flane_5fmarker_2eproto__INCLUDED
